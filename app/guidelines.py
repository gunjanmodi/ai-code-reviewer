CATEGORY_GUIDELINES = {
    "UI / Frontend": [
        "Component structure: Are components modular and reusable?",
        "Code cleanliness: No unused variables, commented-out code, or console logs.",
        "Separation of concerns: Logic, styles, and markup are separated appropriately.",
        "Naming conventions: Component names, class names, and variables are meaningful and follow conventions.",
        "Are reusable components or tokens from the design system used (e.g., buttons, typography, color variables)?",
        "Any unnecessary duplication of styles or components?",
        "Are all alignments, paddings, margins, and font sizes/styles accurate",
        "Are Tailwind classes clean and readable? Are styles placed in correct files (e.g., CSS modules, Tailwind classes, etc.)?",
        "Are Shadcn/UI components used consistently?",
        "Is the UI responsive and accessible?",
        "Are images optimized (e.g., correct format, lazy loaded)?",
        "Are there any large third-party libraries that could be avoided?",
        "Are all edge cases handled? (e.g., empty states, loading states, errors)",
        "Are there any performance optimizations (e.g., memoization, lazy loading)?",
        "Are there any unnecessary re-renders or performance bottlenecks?",
        "Are there any hardcoded px values that should be replaced with relative units (e.g., rem, em)?",
    ],
    "Backend logic / API routes": [
        "Is the code modular, DRY (Donâ€™t Repeat Yourself), and well-structured?",
        "Is the code follows object oriented design principles such as SOLID principles?",
        "Are status codes and responses well-handled?",
        "Is logic split into services and not inline?",
        "Are error states and fallbacks well-managed?",
        "Are error messages helpful and not leaking sensitive information?",
        "Are edge cases handled properly?",
        "Is input validated (e.g., with Zod)?",
        "Are all inputs validated and sanitized to prevent injection attacks",
        "Is authentication and authorization enforced correctly?",
        "Are secrets and sensitive data never hardcoded or logged?",
        "Are functions/methods small and focused?",
        "Are meaningful names used for variables, functions, and files?",
        "Is the code consistent with the rest of the codebase (naming, style, patterns)",
        "Is pagination, filtering, or sorting handled correctly for large datasets?",
        "Are any cascading deletes or foreign key constraints handled carefully?",
        "Are there relevant log messages (no sensitive data)?",
        "Are background jobs delegated to queues where necessary?",
        "Are there unused imports, commented-out code, or console/debug logs?",
        "Are new dependencies justified and properly scoped (no unnecessary bloat)?",
        "Are environment variables used for configuration?",
    ],
    "Security / Auth": [
        "Is sensitive data encrypted and not logged?",
        "Are JWTs, cookies, tokens handled securely?",
        "Is CSRF/SQL injection/XSS risk mitigated?",
        "Are rate limits, auth checks, and session handling implemented?",
    ],
    "Database schema": [
        "Are migrations defined and safe?",
        "Are indexes, constraints, and foreign keys considered?",
        "Is data model normalized where necessary?",
        "Are cascading deletes handled safely?",
    ],
    "Tests": [
        "Are there meaningful unit and integration tests?",
        "Do tests cover edge cases and errors?",
        "Are mocking/stubbing strategies used correctly?",
        "Is test naming consistent and descriptive?",
    ],
    "Infrastructure / Config": [
        "Are secrets in env files, not hardcoded?",
        "Is config logic portable across environments?",
        "Are there safe defaults and fallbacks?",
        "Are CI/CD-related files secure and well-scoped?",
        "Is Docker or deployment infra reviewed for optimization?"
    ]
}